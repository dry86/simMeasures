from typing import Dict
from typing import get_args
from typing import List
from typing import Literal

# -------------------- All categories  trained model that can -------------------- #
DOMAIN_TYPE = Literal["VISION", "NLP", "GRAPHS"]
VISION_DOMAIN: DOMAIN_TYPE = "VISION"
NLP_DOMAIN: DOMAIN_TYPE = "NLP"
GRAPH_DOMAIN: DOMAIN_TYPE = "GRAPHS"

# ----------------------------- All Architectures ---------------------------- #
VISION_ARCHITECTURE_TYPE = Literal["ResNet18", "ResNet34", "ResNet101", "VGG11", "VGG19", "ViT_B32", "ViT_L32"]
NLP_ARCHITECTURE_TYPE = Literal["BERT-L", "BERT-Base"]
GRAPH_ARCHITECTURE_TYPE = Literal["GCN", "GAT", "GraphSAGE"]

NN_ARCHITECTURE_TYPE = VISION_ARCHITECTURE_TYPE | NLP_ARCHITECTURE_TYPE | GRAPH_ARCHITECTURE_TYPE

BENCHMARK_NN_ARCHITECTURES = (
    list(get_args(VISION_ARCHITECTURE_TYPE))
    + list(get_args(NLP_ARCHITECTURE_TYPE))
    + list(get_args(GRAPH_ARCHITECTURE_TYPE))
)

# ----------------------------- Datasets trained on ---------------------------- #
VISION_DATASET_TRAINED_ON = Literal["CIFAR10", "CIFAR100", "ImageNet"]
NLP_DATASET_TRAINED_ON = Literal["mnli, sst2"]
GRAPH_DATASET_TRAINED_ON = Literal["ogbn-arxiv", "cora", "flickr"]

ARXIV_DATASET_NAME: GRAPH_DATASET_TRAINED_ON = "ogbn-arxiv"
CORA_DATASET_NAME: GRAPH_DATASET_TRAINED_ON = "cora"
FLICKR_DATASET_NAME: GRAPH_DATASET_TRAINED_ON = "flickr"

BENCHMARK_DATASET = VISION_DATASET_TRAINED_ON | NLP_DATASET_TRAINED_ON | GRAPH_DATASET_TRAINED_ON
BENCHMARK_DATASETS_LIST = (
    list(get_args(VISION_DATASET_TRAINED_ON))
    + list(get_args(NLP_DATASET_TRAINED_ON))
    + list(get_args(GRAPH_DATASET_TRAINED_ON))
)


# ---------------------------- EXPERIMENT SETTING IDENTIFIERS --------------------------- #
# These are shared across domains and datasets
SETTING_IDENTIFIER = Literal[
    "Normal",
    "RandomLabels_0",
    "RandomLabels_25",
    "RandomLabels_50",
    "RandomLabels_75",
    "RandomLabels_100",
    "Shortcut_0",
    "Shortcut_25",
    "Shortcut_50",
    "Shortcut_75",
    "Shortcut_100",
    "MultiLayer",
    "Augmentation_0",
    "Augmentation_25",
    "Augmentation_50",
    "Augmentation_75",
    "Augmentation_100",
    "GaussNoise",
    "Randomlabel",
    "Shortcut",
]

STANDARD_SETTING: SETTING_IDENTIFIER = "Normal"
MULTI_LAYER_SETTING: SETTING_IDENTIFIER = "MultiLayer"

RANDOM_LABEL_25_SETTING: SETTING_IDENTIFIER = "RandomLabels_25"
RANDOM_LABEL_50_SETTING: SETTING_IDENTIFIER = "RandomLabels_50"
RANDOM_LABEL_75_SETTING: SETTING_IDENTIFIER = "RandomLabels_75"
RANDOM_LABEL_100_SETTING: SETTING_IDENTIFIER = "RandomLabels_100"

SHORTCUT_0_SETTING: SETTING_IDENTIFIER = "Shortcut_0"
SHORTCUT_25_SETTING: SETTING_IDENTIFIER = "Shortcut_25"
SHORTCUT_50_SETTING: SETTING_IDENTIFIER = "Shortcut_50"
SHORTCUT_75_SETTING: SETTING_IDENTIFIER = "Shortcut_75"
SHORTCUT_100_SETTING: SETTING_IDENTIFIER = "Shortcut_100"

AUGMENTATION_25_SETTING: SETTING_IDENTIFIER = "Augmentation_25"
AUGMENTATION_50_SETTING: SETTING_IDENTIFIER = "Augmentation_50"
AUGMENTATION_75_SETTING: SETTING_IDENTIFIER = "Augmentation_75"
AUGMENTATION_100_SETTING: SETTING_IDENTIFIER = "Augmentation_100"

SINGLE_MODEL_EXPERIMENT_IDENTIFIER = Literal["layer_test"]
MULTIMODEL_EXPERIMENT_IDENTIFIER = Literal["label_test", "shortcut_test", "augmentation_test"]
OUTPUT_CORRELATION_EXPERIMENT_IDENTIFIER = Literal["output_correlation_test"]

EXPERIMENT_IDENTIFIER = (
    SINGLE_MODEL_EXPERIMENT_IDENTIFIER | MULTIMODEL_EXPERIMENT_IDENTIFIER | OUTPUT_CORRELATION_EXPERIMENT_IDENTIFIER
)
BENCHMARK_EXPERIMENTS_LIST = (
    list(get_args(SINGLE_MODEL_EXPERIMENT_IDENTIFIER))
    + list(get_args(MULTIMODEL_EXPERIMENT_IDENTIFIER))
    + list(get_args(OUTPUT_CORRELATION_EXPERIMENT_IDENTIFIER))
)


LAYER_EXPERIMENT_NAME: SINGLE_MODEL_EXPERIMENT_IDENTIFIER = "layer_test"
LABEL_EXPERIMENT_NAME: MULTIMODEL_EXPERIMENT_IDENTIFIER = "label_test"
SHORTCUT_EXPERIMENT_NAME: MULTIMODEL_EXPERIMENT_IDENTIFIER = "shortcut_test"
AUGMENTATION_EXPERIMENT_NAME: MULTIMODEL_EXPERIMENT_IDENTIFIER = "augmentation_test"
OUTPUT_CORRELATION_EXPERIMENT_NAME: OUTPUT_CORRELATION_EXPERIMENT_IDENTIFIER = "output_correlation_test"

GRAPH_EXPERIMENT_DEFAULT_DICT: Dict[EXPERIMENT_IDENTIFIER, List[SETTING_IDENTIFIER]] = dict(
    {
        LAYER_EXPERIMENT_NAME: [MULTI_LAYER_SETTING],
        LABEL_EXPERIMENT_NAME: [
            STANDARD_SETTING,
            RANDOM_LABEL_25_SETTING,
            RANDOM_LABEL_100_SETTING,
        ],
        SHORTCUT_EXPERIMENT_NAME: [
            SHORTCUT_0_SETTING,
            SHORTCUT_50_SETTING,
            SHORTCUT_100_SETTING,
        ],
        AUGMENTATION_EXPERIMENT_NAME: [
            STANDARD_SETTING,
            AUGMENTATION_25_SETTING,
            AUGMENTATION_100_SETTING,
        ],
        OUTPUT_CORRELATION_EXPERIMENT_NAME: [STANDARD_SETTING],
    }
)


GRAPH_EXPERIMENT_FIVE_GROUPS_DICT: Dict[EXPERIMENT_IDENTIFIER, List[SETTING_IDENTIFIER]] = dict(
    {
        LAYER_EXPERIMENT_NAME: [MULTI_LAYER_SETTING],
        LABEL_EXPERIMENT_NAME: [
            STANDARD_SETTING,
            RANDOM_LABEL_25_SETTING,
            RANDOM_LABEL_50_SETTING,
            RANDOM_LABEL_75_SETTING,
            RANDOM_LABEL_100_SETTING,
        ],
        SHORTCUT_EXPERIMENT_NAME: [
            SHORTCUT_0_SETTING,
            SHORTCUT_25_SETTING,
            SHORTCUT_50_SETTING,
            SHORTCUT_75_SETTING,
            SHORTCUT_100_SETTING,
        ],
        AUGMENTATION_EXPERIMENT_NAME: [
            STANDARD_SETTING,
            AUGMENTATION_25_SETTING,
            AUGMENTATION_50_SETTING,
            AUGMENTATION_75_SETTING,
            AUGMENTATION_100_SETTING,
        ],
        OUTPUT_CORRELATION_EXPERIMENT_NAME: [STANDARD_SETTING],
    }
)

GRAPH_EXPERIMENT_TWO_GROUPS_DICT: Dict[EXPERIMENT_IDENTIFIER, List[SETTING_IDENTIFIER]] = dict(
    {
        LAYER_EXPERIMENT_NAME: [MULTI_LAYER_SETTING],
        LABEL_EXPERIMENT_NAME: [
            STANDARD_SETTING,
            RANDOM_LABEL_100_SETTING,
        ],
        SHORTCUT_EXPERIMENT_NAME: [
            SHORTCUT_0_SETTING,
            SHORTCUT_100_SETTING,
        ],
        AUGMENTATION_EXPERIMENT_NAME: [
            STANDARD_SETTING,
            AUGMENTATION_100_SETTING,
        ],
        OUTPUT_CORRELATION_EXPERIMENT_NAME: [STANDARD_SETTING],
    }
)


EXPERIMENT_SEED = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
DEFAULT_SEEDS = list(get_args(EXPERIMENT_SEED))[:5]
SINGLE_SAMPLE_SEED = 2024

EXPERIMENT_COMPARISON_TYPE = Literal[
    "GroupSeparationExperiment", "OutputCorrelationExperiment", "MonotonicityExperiment"
]
GROUP_SEPARATION_EXPERIMENT: EXPERIMENT_COMPARISON_TYPE = "GroupSeparationExperiment"
OUTPUT_CORRELATION_EXPERIMENT: EXPERIMENT_COMPARISON_TYPE = "OutputCorrelationExperiment"
MONOTONICITY_EXPERIMENT: EXPERIMENT_COMPARISON_TYPE = "MonotonicityExperiment"
